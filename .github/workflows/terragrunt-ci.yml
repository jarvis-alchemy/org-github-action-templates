name: Terragrunt CI

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'The directory where Terragrunt should run'
        required: true
        type: string
      terraform-version:
        description: 'Version of Terraform to use'
        required: false
        type: string
        default: '1.6.2'
      use-local-backend:
        required: false
        type: boolean
        default: false
    secrets:
      TERRAGRUNT_GITHUB_TOKEN:
        required: false
      GCP_SERVICE_ACCOUNT_KEY:
        required: false

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.0/terragrunt_linux_amd64 -o /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt

      - name: Terragrunt Format
        run: |
          cd ${{ inputs.working-directory }}
          terragrunt hclfmt

      - name: Download Terraform State (if local backend)
        if: ${{ inputs.use-local-backend }}
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ${{ inputs.working-directory }}/

      - name: Terragrunt Init
        run: |
          cd ${{ inputs.working-directory }}
          terragrunt init
        env:
          TERRAGRUNT_GITHUB_TOKEN: ${{ secrets.TERRAGRUNT_GITHUB_TOKEN }}

      - name: Terragrunt Validate
        run: |
          cd ${{ inputs.working-directory }}
          terragrunt validate

      - name: Terragrunt Plan
        run: |
          cd ${{ inputs.working-directory }}
          terragrunt plan -detailed-exitcode
        env:
          TERRAGRUNT_GITHUB_TOKEN: ${{ secrets.TERRAGRUNT_GITHUB_TOKEN }}

      # - name: Terragrunt Plan
      #   working-directory: ${{ inputs.working-directory }}
      #   run: |
      #     # Ignore data source errors during plan
      #     terragrunt plan -detailed-exitcode || if [ $? -eq 1 ]; then
      #       echo "Error during plan phase"
      #       exit 1
      #     fi
      #   continue-on-error: true
      #   env:
      #     TF_VAR_environment: ${{ inputs.environment }}

      - name: Upload Terraform State (if local backend)
        if: ${{ inputs.use-local-backend }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: ${{ inputs.working-directory }}/terraform.tfstate

